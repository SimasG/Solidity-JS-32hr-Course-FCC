{
  "address": "0x6025C83DbD806AFEA88D1977b54f744391374e33",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfb40217b04c2875de7e5499b1c8274d1042528fc2691d8e2299e8c6b86dcacc2",
  "receipt": {
    "to": null,
    "from": "0x56775d7D15103E0E627F8a8625E5fbCdbA87031B",
    "contractAddress": "0x6025C83DbD806AFEA88D1977b54f744391374e33",
    "transactionIndex": 67,
    "gasUsed": "880289",
    "logsBloom": "0x
    "blockHash": "0x04f3cf550293665980a162347ca5cd44ca365c6f69276c5e8d10f56cf6f5ffc4",
    "transactionHash": "0xfb40217b04c2875de7e5499b1c8274d1042528fc2691d8e2299e8c6b86dcacc2",
    "logs": [],
    "blockNumber": 10800145,
    "cumulativeGasUsed": "28750337",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8A753747A1Fa494EC906cE90E9f37563A8AF630e"
  ],
  "numDeployments": 1,
  "solcInputHash": "6fdb50c91bc2989eba927831365a488c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// A contract that can receive ETH and withdraw it (no sending it to other though)\\n// 1. get funds from users\\n// 2. withdraw funds\\n// 3. set minimum funding value in USD\\n\\n// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\ncontract FundMe {\\n    // this allows using functions in PriceConverter like methods for\\n    // uint256 vars (e.g. msg.value.getConversionRate)\\n    using PriceConverter for uint256;\\n\\n    // post on github discussions why do we need to multiply it by 1e18\\n    // \\\"constant\\\" prevents the var from being changed -> costs less gas\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n\\n    // keeping track of all funders by making an array of their addresses\\n    // strictly addresses since that is the data type we specified\\n    address[] public funders;\\n\\n    // connecting address with the amount funded so we could track\\n    // which address sent how much\\n    mapping(address => uint256) public addressToAmountFunded;\\n\\n    // \\\"immutable\\\" makes the var read-only (like \\\"constant\\\")\\n    // but assignable in the constructor -> costs less gass\\n    address public immutable i_owner;\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n    // constructor gets automatically run each time a contract is deployed\\n    // and called?\\n    constructor(address priceFeedAddress) {\\n        // setting the owner to be the contract creator\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // \\\"payable\\\" implies that value will be sent in this function\\n    function fund() public payable {\\n        // \\\"msg.value\\\" is a number of wei sent in the transaction\\n        // here in \\\"getConversionRate\\\" we're not passing an argument even though\\n        // we've specified a parameter in the original func\\n        // that is because anything that \\\"getConversionRate\\\" is being used as a\\n        // method on is considered the first argument of the function\\n        require(\\n            msg.value.getConversionRate(priceFeed) > MINIMUM_USD,\\n            \\\"Didn't send enough!\\\"\\n        );\\n        addressToAmountFunded[msg.sender] = msg.value;\\n        // \\\"msg.sender\\\" is a globally available variable for sender's wallet address\\n        funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        // resetting the amount sent by each funder\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n\\n        // resetting the funders array by creating a new array with 0 items\\n        funders = new address[](0);\\n\\n        // actually withdrawing the funds. there are 3 methds:\\n        // // 1. Transfer\\n        // // changing the data type from address to payable address\\n        // // we can only make transactions with payable address data types\\n        // payable(msg.sender).transfer(address(this).balance);\\n\\n        // // 2. Send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // // we have to add the \\\"require\\\" because \\\"send\\\" doesn't throw errors if\\n        // // unsuccessful. instead if returns a boolean\\n        // // if sendSuccess = false, throw error \\\"Send failed!\\\";\\n        // require(sendSuccess, \\\"Send failed!\\\");\\n\\n        // 3. Call\\n        // with \\\"call\\\", we can both value AND calldata \\\"(\\\"\\\")\\\"\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed!\\\");\\n    }\\n\\n    // reusing code in different functions\\n    modifier onlyOwner() {\\n        require(msg.sender == i_owner, \\\"Sender is not owner!\\\");\\n        // specifying that we want to run the function code only after\\n        // checking the require condition\\n        _;\\n    }\\n\\n    // What happens if someone sends this contract ETH\\n    // without calling the fund func?\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n}\\n\",\"keccak256\":\"0xf08454bc00fc61d89d91ad56e3c6ac66be1b7894e350c3eb42cd289cc9f5d2da\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// importing code from github (as a NPM package at chainlink/contracts)\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Libraries are similar to contracts, but you can\\u2019t declare any state\\n// variable (i.e. spend gas) and you can\\u2019t send ether.\\nlibrary PriceConverter {\\n    // getting ETH price in USD -> interacting with outside data -> oracles\\n    // Rinkeby testnet\\n    // ETH/USD address: 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n    // ABI: AggregatorV3Interface\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // type: AggregatorV3Interface, var name: priceFeed\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n        // );\\n        // \\\"latestRoundData\\\" returns 5 outputs but we only want 1\\n        // that's why we put commas for outputs we don't need\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        // it returns price with 8 decimals (e.g. 2,000.00000000)\\n        // that's why we have to add 10 decimals to have 18 total (convention)\\n        // converting price from int256 to uint256 type\\n        return uint256(price * 1e10); // 10**10\\n    }\\n\\n    // converting specified # of ETH to USD\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // getting the eth price in usd\\n        uint256 ethPrice = getPrice(priceFeed);\\n\\n        // ethPrice -> 18 decimals, ethAmount -> 18 decimals\\n        // that's why we have to divide by 18 decimals\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n\\n        // still 18 decimals left. why can't we just divide by 1e36 up there?\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xf38dca0db256d0469d47fff01d1d3a803faf38cc326ae0f56f70530f7032bbb6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c578063b60d428814610137578063dba6335f14610141578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102d1565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107ae565b61051a565b6040516100d891906107f4565b60405180910390f35b3480156100ed57600080fd5b506100f6610532565b60405161010391906107f4565b60405180910390f35b34801561011857600080fd5b5061012161053f565b60405161012e919061086e565b60405180910390f35b61013f6101a9565b005b34801561014d57600080fd5b50610156610565565b6040516101639190610898565b60405180910390f35b34801561017857600080fd5b50610193600480360381019061018e91906108df565b610589565b6040516101a09190610898565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105c890919063ffffffff16565b11610228576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021f90610969565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461035f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610356906109d5565b60405180910390fd5b60005b60008054905081101561040a576000808281548110610384576103836109f5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040290610a53565b915050610362565b50600067ffffffffffffffff81111561042657610425610a9c565b5b6040519080825280602002602001820160405280156104545781602001602082028036833780820191505090505b506000908051906020019061046a9291906106a4565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049190610afc565b60006040518083038185875af1925050503d80600081146104ce576040519150601f19603f3d011682016040523d82523d6000602084013e6104d3565b606091505b5050905080610517576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050e90610b5d565b60405180910390fd5b50565b60016020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000818154811061059957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105d483610604565b90506000670de0b6b3a764000085836105ed9190610b7d565b6105f79190610c06565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561064d57600080fd5b505afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190610cc4565b5050509150506402540be4008161069c9190610d3f565b915050919050565b82805482825590600052602060002090810192821561071d579160200282015b8281111561071c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106c4565b5b50905061072a919061072e565b5090565b5b8082111561074757600081600090555060010161072f565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061077b82610750565b9050919050565b61078b81610770565b811461079657600080fd5b50565b6000813590506107a881610782565b92915050565b6000602082840312156107c4576107c361074b565b5b60006107d284828501610799565b91505092915050565b6000819050919050565b6107ee816107db565b82525050565b600060208201905061080960008301846107e5565b92915050565b6000819050919050565b600061083461082f61082a84610750565b61080f565b610750565b9050919050565b600061084682610819565b9050919050565b60006108588261083b565b9050919050565b6108688161084d565b82525050565b6000602082019050610883600083018461085f565b92915050565b61089281610770565b82525050565b60006020820190506108ad6000830184610889565b92915050565b6108bc816107db565b81146108c757600080fd5b50565b6000813590506108d9816108b3565b92915050565b6000602082840312156108f5576108f461074b565b5b6000610903848285016108ca565b91505092915050565b600082825260208201905092915050565b7f4469646e27742073656e6420656e6f7567682100000000000000000000000000600082015250565b600061095360138361090c565b915061095e8261091d565b602082019050919050565b6000602082019050818103600083015261098281610946565b9050919050565b7f53656e646572206973206e6f74206f776e657221000000000000000000000000600082015250565b60006109bf60148361090c565b91506109ca82610989565b602082019050919050565b600060208201905081810360008301526109ee816109b2565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a5e826107db565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a9157610a90610a24565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ae6600083610acb565b9150610af182610ad6565b600082019050919050565b6000610b0782610ad9565b9150819050919050565b7f43616c6c206661696c6564210000000000000000000000000000000000000000600082015250565b6000610b47600c8361090c565b9150610b5282610b11565b602082019050919050565b60006020820190508181036000830152610b7681610b3a565b9050919050565b6000610b88826107db565b9150610b93836107db565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bcc57610bcb610a24565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c11826107db565b9150610c1c836107db565b925082610c2c57610c2b610bd7565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c5681610c37565b8114610c6157600080fd5b50565b600081519050610c7381610c4d565b92915050565b6000819050919050565b610c8c81610c79565b8114610c9757600080fd5b50565b600081519050610ca981610c83565b92915050565b600081519050610cbe816108b3565b92915050565b600080600080600060a08688031215610ce057610cdf61074b565b5b6000610cee88828901610c64565b9550506020610cff88828901610c9a565b9450506040610d1088828901610caf565b9350506060610d2188828901610caf565b9250506080610d3288828901610c64565b9150509295509295909350565b6000610d4a82610c79565b9150610d5583610c79565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610d9457610d93610a24565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610dd157610dd0610a24565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e0e57610e0d610a24565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e4b57610e4a610a24565b5b82820290509291505056fea26469706673582212207acfcb4690f1d5c929fb906c50367550295478e8f9a38ad1f67ef88c18594e7764736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 68,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}