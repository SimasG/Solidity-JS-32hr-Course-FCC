{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb1caa9e98ab47eeba6cc3f4ac380fe3e7c69e415be49b54e2c3b4e087f11bcfa",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1050930",
    "logsBloom": "0x
    "blockHash": "0x394cb0bfc1f89b6fa6107fea8b59ab640de7c8451c60961afde3ee23180406d1",
    "transactionHash": "0xb1caa9e98ab47eeba6cc3f4ac380fe3e7c69e415be49b54e2c3b4e087f11bcfa",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1050930",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "f11b89ce1a05c33553939943c560ffc7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// 1. Pragma\\npragma solidity ^0.8.0;\\n\\n// 2. Imports\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Error Codes\\n// A different way to throw errors -> more gas efficient\\nerror FundMe__NotOwner();\\n\\n// 4. Libraries\\n// 5. Interfaces\\n\\n// 6. Contracts\\ncontract FundMe {\\n    // 6.1. Type Declarations\\n    // Using a PriceConverter library to extract the math operations from the contract\\n    using PriceConverter for uint256;\\n\\n    // ** s_ -> storage (the variable will be stored in storage) -> gas expensive\\n    // ** i_ -> immutable variable (it won't be stored in storage (& just used directly in code execution)) -> gas cheap\\n\\n    // 6.2. State Variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // \\\"immutable\\\" keyword only allows to update variable once after\\n    // declaring them (perfect for constructors + saves gas)\\n    address private immutable i_owner;\\n\\n    // \\\"constant\\\" keyword prevents variable from being updated + saves gas\\n    uint256 public constant MINIMUM_USD = 50 * 1e18; // Good to leave \\\"public\\\" to allow others to easily see the minimum USD amount\\n    AggregatorV3Interface private s_priceFeed; // \\\"priceFeed\\\" *interface*\\n\\n    // 6.3. Events (none here)\\n\\n    // 6.4. Modifiers\\n    modifier onlyOwner() {\\n        // 0. Ensuring only the address that deployed this contract can withdraw funds\\n        // Run this code first\\n\\n        // Few ways to do this:\\n        // 1. Old school\\n        // require(msg.sender == i_owner, \\\"Sender is not the owner!\\\");\\n\\n        // 2. New & more gas efficient\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        }\\n        // Run the rest of the func\\n        _;\\n    }\\n\\n    // 6.5. Functions\\n    // 6.5.1 Constructors\\n    constructor(address priceFeedAddress) {\\n        // Assigning the owner in the constructor because it only runs once the contract is deployed\\n        // (aka we already have access to \\\"msg.sender\\\" address)\\n        i_owner = msg.sender;\\n\\n        // Making our \\\"priceFeedAddress\\\" dynamic (so it could be used with different addresses)\\n        // ** By matching ABI (\\\"AggregatorV3Interface\\\") with the contract address (\\\"priceFeedAddress\\\"),\\n        // ** we get access to the *interface* itself & then are able to interact with it (e.g. get price, etc.)\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // 6.5.2. Receive\\n    // Triggering \\\"fund()\\\" func if someone sends ETH to this contract\\n    // without the \\\"fund()\\\" func\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    // 6.5.3. Fallback\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    // 6.5.4. External Funcs\\n\\n    // 6.5.5. Public Funcs\\n    function fund() public payable {\\n        // \\\"1e18\\\" = 1 * 10^18\\n        // Library functions automatically use the values they're used as\\n        // methods for as their initial argument\\n        // e.g. \\\"msg.value\\\" is used as the first argument for \\\"getConversionRate(uint256 ethAmount)\\\"\\n        // Additional arguments should be added normally e.g. for \\\"getConversionRate (uint256 ethAmount, uint256 smthElse)\\\"\\n        // We'd use \\\"msg.value.getConversionRate(123)\\\", \\\"123\\\" being \\\"smthElse\\\"\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        // 1. Resetting the amounts funded by each funder to 0\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n\\n        // 2. Resetting the array\\n        s_funders = new address[](0);\\n\\n        // 3. Withdraw the funds (to the caller of this contract)\\n\\n        // ** 3 ways to send funds in EVM: **\\n        // 1) Transfer\\n        // \\\"msg.sender\\\" -> address data type | \\\"payable(msg.sender)\\\" -> address payable data type\\n        // Funds go from msg.sender to the caller of this contract? NO\\n        // Funds go from \\\"address(this)\\\" to \\\"msg.sender\\\" (who, in this case,\\n        // I guess is the caller of this contract?) YES\\n        // payable(msg.sender).transfer(address(this).balance);\\n\\n        // 2) Send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n\\n        // 3) Call - *currently the recommended way to send & receive funds*\\n        // leaving \\\"call()\\\" blank since we don't want to call this func on any other contract\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        // Saving your storage var (\\\"s_funders\\\") into a memory var (\\\"funders\\\"). Now when looping over,\\n        // we'll be reading from the memory \\\"funders\\\" array instead of reading from a storage array every time\\n        //  -> much cheaper gas-wise\\n        address[] memory funders = s_funders;\\n\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n\\n            s_funders = new address[](0);\\n\\n            // \\\"payable(msg.sender)\\\" & \\\"i_owner\\\" seems to be the same thing\\n            // ** When exactly do we know that the call was successful (what's the condition)?\\n            (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\n                \\\"\\\"\\n            );\\n            require(callSuccess, \\\"Call failed\\\");\\n        }\\n    }\\n\\n    // 6.5.6. Internal Funcs (none here)\\n    // 6.5.7. Private Funcs (none here)\\n    // 6.5.8. View/Pure Funcs\\n    // ** Getters (for internal variables) -> not sure how they work\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xeab8788040073b455086d8f61f15956485831c48bde299733a5e4fd10f4ffdf7\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Importing an interface (& most importantly, its ABI) to interact with it\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    // Getting price of ETH in USD\\n    // ** Libraries only get embedded into the contract if the library functions are *internal*\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        // );\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n\\n        // To get the ETH price in USD, we should divide \\\"price\\\" by 1e8\\n        // (since now it is e.g. 160000000000 but should be 1,600.00000000 USD))\\n        // \\\"msg.value\\\", however should be divided by 1e18 to get the price in ETH\\n        // since it's currently expressed in wei (x ETH * 1e18)\\n        // Hence, we're multiplying \\\"price\\\" by 1e10 to match \\\"msg.value\\\" format\\n\\n        // Also changing price data type from \\\"int256\\\" to \\\"uint256\\\" -> not sure why\\n        return uint256(price * 1e10);\\n    }\\n\\n    // ** Libraries only get embedded into the contract if the library functions are *internal*\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n\\n        // If we multiplied \\\"ethPrice\\\" & \\\"ethAmount\\\" without dividing it by 1e18,\\n        // we would've received 36 0's in the result.\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x76918035157b9acb1415ecb1d564966c237a922dcfaaf1e42b64241c04832b10\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200132c3803806200132c833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111a6620001866000396000818161034f0152818161059e015281816105ee01526107cf01526111a66000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c1461018e5761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ade565b610305565b6040516100cc9190610b24565b60405180910390f35b3480156100e157600080fd5b506100ea61034d565b005b3480156100f857600080fd5b5061010161058d565b60405161010e9190610b24565b60405180910390f35b34801561012357600080fd5b5061012c61059a565b6040516101399190610b4e565b60405180910390f35b34801561014e57600080fd5b506101576105c2565b6040516101649190610bc8565b60405180910390f35b6101756101cb565b005b34801561018357600080fd5b5061018c6105ec565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610c0f565b6108b0565b6040516101c29190610b4e565b60405180910390f35b6802b5e3af16b188000061020a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108f890919063ffffffff16565b101561024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610c99565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102999190610ce8565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d2576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561047d576000600182815481106103f8576103f7610d3e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061047590610d6d565b9150506103d5565b50600067ffffffffffffffff81111561049957610498610db6565b5b6040519080825280602002602001820160405280156104c75781602001602082028036833780820191505090505b50600190805190602001906104dd9291906109d4565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161050490610e16565b60006040518083038185875af1925050503d8060008114610541576040519150601f19603f3d011682016040523d82523d6000602084013e610546565b606091505b505090508061058a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058190610e77565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610671576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106f557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ab575b5050505050905060005b81518110156108ac57600082828151811061071d5761071c610d3e565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600067ffffffffffffffff81111561078657610785610db6565b5b6040519080825280602002602001820160405280156107b45781602001602082028036833780820191505090505b50600190805190602001906107ca9291906109d4565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161081190610e16565b60006040518083038185875af1925050503d806000811461084e576040519150601f19603f3d011682016040523d82523d6000602084013e610853565b606091505b5050905080610897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088e90610e77565b60405180910390fd5b505080806108a490610d6d565b9150506106ff565b5050565b6000600182815481106108c6576108c5610d3e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061090483610934565b90506000670de0b6b3a7640000858361091d9190610e97565b6109279190610f20565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561097d57600080fd5b505afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190610fde565b5050509150506402540be400816109cc9190611059565b915050919050565b828054828255906000526020600020908101928215610a4d579160200282015b82811115610a4c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109f4565b5b509050610a5a9190610a5e565b5090565b5b80821115610a77576000816000905550600101610a5f565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aab82610a80565b9050919050565b610abb81610aa0565b8114610ac657600080fd5b50565b600081359050610ad881610ab2565b92915050565b600060208284031215610af457610af3610a7b565b5b6000610b0284828501610ac9565b91505092915050565b6000819050919050565b610b1e81610b0b565b82525050565b6000602082019050610b396000830184610b15565b92915050565b610b4881610aa0565b82525050565b6000602082019050610b636000830184610b3f565b92915050565b6000819050919050565b6000610b8e610b89610b8484610a80565b610b69565b610a80565b9050919050565b6000610ba082610b73565b9050919050565b6000610bb282610b95565b9050919050565b610bc281610ba7565b82525050565b6000602082019050610bdd6000830184610bb9565b92915050565b610bec81610b0b565b8114610bf757600080fd5b50565b600081359050610c0981610be3565b92915050565b600060208284031215610c2557610c24610a7b565b5b6000610c3384828501610bfa565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c83601b83610c3c565b9150610c8e82610c4d565b602082019050919050565b60006020820190508181036000830152610cb281610c76565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cf382610b0b565b9150610cfe83610b0b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d3357610d32610cb9565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d7882610b0b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dab57610daa610cb9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e00600083610de5565b9150610e0b82610df0565b600082019050919050565b6000610e2182610df3565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e61600b83610c3c565b9150610e6c82610e2b565b602082019050919050565b60006020820190508181036000830152610e9081610e54565b9050919050565b6000610ea282610b0b565b9150610ead83610b0b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ee657610ee5610cb9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f2b82610b0b565b9150610f3683610b0b565b925082610f4657610f45610ef1565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f7081610f51565b8114610f7b57600080fd5b50565b600081519050610f8d81610f67565b92915050565b6000819050919050565b610fa681610f93565b8114610fb157600080fd5b50565b600081519050610fc381610f9d565b92915050565b600081519050610fd881610be3565b92915050565b600080600080600060a08688031215610ffa57610ff9610a7b565b5b600061100888828901610f7e565b955050602061101988828901610fb4565b945050604061102a88828901610fc9565b935050606061103b88828901610fc9565b925050608061104c88828901610f7e565b9150509295509295909350565b600061106482610f93565b915061106f83610f93565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110ae576110ad610cb9565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110eb576110ea610cb9565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561112857611127610cb9565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561116557611164610cb9565b5b82820290509291505056fea2646970667358221220757521f7edd627498b942f8416320eccd13ab1ce29d17f60ed689de5ba87ca9e64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c1461018e5761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101cb565b005b6100966101cb565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ade565b610305565b6040516100cc9190610b24565b60405180910390f35b3480156100e157600080fd5b506100ea61034d565b005b3480156100f857600080fd5b5061010161058d565b60405161010e9190610b24565b60405180910390f35b34801561012357600080fd5b5061012c61059a565b6040516101399190610b4e565b60405180910390f35b34801561014e57600080fd5b506101576105c2565b6040516101649190610bc8565b60405180910390f35b6101756101cb565b005b34801561018357600080fd5b5061018c6105ec565b005b34801561019a57600080fd5b506101b560048036038101906101b09190610c0f565b6108b0565b6040516101c29190610b4e565b60405180910390f35b6802b5e3af16b188000061020a600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108f890919063ffffffff16565b101561024b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024290610c99565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102999190610ce8565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103d2576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561047d576000600182815481106103f8576103f7610d3e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061047590610d6d565b9150506103d5565b50600067ffffffffffffffff81111561049957610498610db6565b5b6040519080825280602002602001820160405280156104c75781602001602082028036833780820191505090505b50600190805190602001906104dd9291906109d4565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161050490610e16565b60006040518083038185875af1925050503d8060008114610541576040519150601f19603f3d011682016040523d82523d6000602084013e610546565b606091505b505090508061058a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161058190610e77565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610671576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106f557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106ab575b5050505050905060005b81518110156108ac57600082828151811061071d5761071c610d3e565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600067ffffffffffffffff81111561078657610785610db6565b5b6040519080825280602002602001820160405280156107b45781602001602082028036833780820191505090505b50600190805190602001906107ca9291906109d4565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161081190610e16565b60006040518083038185875af1925050503d806000811461084e576040519150601f19603f3d011682016040523d82523d6000602084013e610853565b606091505b5050905080610897576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088e90610e77565b60405180910390fd5b505080806108a490610d6d565b9150506106ff565b5050565b6000600182815481106108c6576108c5610d3e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061090483610934565b90506000670de0b6b3a7640000858361091d9190610e97565b6109279190610f20565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561097d57600080fd5b505afa158015610991573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b59190610fde565b5050509150506402540be400816109cc9190611059565b915050919050565b828054828255906000526020600020908101928215610a4d579160200282015b82811115610a4c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109f4565b5b509050610a5a9190610a5e565b5090565b5b80821115610a77576000816000905550600101610a5f565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610aab82610a80565b9050919050565b610abb81610aa0565b8114610ac657600080fd5b50565b600081359050610ad881610ab2565b92915050565b600060208284031215610af457610af3610a7b565b5b6000610b0284828501610ac9565b91505092915050565b6000819050919050565b610b1e81610b0b565b82525050565b6000602082019050610b396000830184610b15565b92915050565b610b4881610aa0565b82525050565b6000602082019050610b636000830184610b3f565b92915050565b6000819050919050565b6000610b8e610b89610b8484610a80565b610b69565b610a80565b9050919050565b6000610ba082610b73565b9050919050565b6000610bb282610b95565b9050919050565b610bc281610ba7565b82525050565b6000602082019050610bdd6000830184610bb9565b92915050565b610bec81610b0b565b8114610bf757600080fd5b50565b600081359050610c0981610be3565b92915050565b600060208284031215610c2557610c24610a7b565b5b6000610c3384828501610bfa565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c83601b83610c3c565b9150610c8e82610c4d565b602082019050919050565b60006020820190508181036000830152610cb281610c76565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cf382610b0b565b9150610cfe83610b0b565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d3357610d32610cb9565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d7882610b0b565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610dab57610daa610cb9565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610e00600083610de5565b9150610e0b82610df0565b600082019050919050565b6000610e2182610df3565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e61600b83610c3c565b9150610e6c82610e2b565b602082019050919050565b60006020820190508181036000830152610e9081610e54565b9050919050565b6000610ea282610b0b565b9150610ead83610b0b565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ee657610ee5610cb9565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f2b82610b0b565b9150610f3683610b0b565b925082610f4657610f45610ef1565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f7081610f51565b8114610f7b57600080fd5b50565b600081519050610f8d81610f67565b92915050565b6000819050919050565b610fa681610f93565b8114610fb157600080fd5b50565b600081519050610fc381610f9d565b92915050565b600081519050610fd881610be3565b92915050565b600080600080600060a08688031215610ffa57610ff9610a7b565b5b600061100888828901610f7e565b955050602061101988828901610fb4565b945050604061102a88828901610fc9565b935050606061103b88828901610fc9565b925050608061104c88828901610f7e565b9150509295509295909350565b600061106482610f93565b915061106f83610f93565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156110ae576110ad610cb9565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110eb576110ea610cb9565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561112857611127610cb9565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561116557611164610cb9565b5b82820290509291505056fea2646970667358221220757521f7edd627498b942f8416320eccd13ab1ce29d17f60ed689de5ba87ca9e64736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 57,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 60,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 70,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}